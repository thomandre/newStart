// Generated by CoffeeScript 1.6.3
(function() {
  var height, page, tagname, url, width, _ref;

  _ref = phantom.args, url = _ref[0], height = _ref[1], width = _ref[2], tagname = _ref[3];

  console.log("url " + url + ", height " + height + ", width " + width + ", tagname " + tagname);

  page = require('webpage').create();

  page.viewportSize = {
    width: width,
    height: height
  };

  page.onConsoleMessage = function(msg) {
    return console.log(msg);
  };

  page.open(url, function(status) {
    if (status !== "success") {
      return console.log("Unable to open " + url);
    } else {
      page.evaluate(function() {
        var attributes, el, elements, i, output, propertyName, rule, ruleList, rules, style, _i, _j, _k, _len, _ref1, _ref2;
        output = {
          url: location,
          retrieved_at: new Date,
          elements: []
        };
        elements = document.getElementsByTagName(tagname);
        console.log("elements " + elements);
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          style = window.getComputedStyle(el);
          attributes = {};
          for (i = _j = 0, _ref1 = style.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            propertyName = style.item(i);
            attributes[propertyName] = style.getPropertyValue(propertyName);
          }
          ruleList = el.ownerDocument.defaultView.getMatchedCSSRules(el, '') || [];
          rules = [];
          for (i = _k = 0, _ref2 = ruleList.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
            rule = ruleList[i];
            rules.push({
              selectorText: rule.selectorText,
              parentStyleSheet: rule.parentStyleSheet.href
            });
          }
          output.elements.push({
            id: el.id,
            className: el.className,
            nodeName: el.nodeName,
            offsetHeight: el.offsetHeight,
            offsetWidth: el.offsetWidth,
            offsetTop: el.offsetTop,
            offsetLeft: el.offsetLeft,
            computedStyle: attributes,
            styleRules: rules
          });
        }
        return console.log(JSON.stringify(output, null, 4));
      });
      return window.setTimeout((function() {
        return phantom.exit();
      }), 200);
    }
  });

}).call(this);
