// Generated by CoffeeScript 1.6.3
(function() {
  var height, page, url, width, _ref;

  _ref = phantom.args, url = _ref[0], height = _ref[1], width = _ref[2];

  page = require('webpage').create();

  page.viewportSize = {
    width: width,
    height: height
  };

  page.onConsoleMessage = function(msg) {
    return console.log(msg);
  };
  
  page.onError = function (msg, trace) {
      /*console.log(msg);
      trace.forEach(function(item) {
          console.log('  ', item.file, ':', item.line);
      })*/
  }

  page.onResourceReceived = function(response) {
    //console.log('Receive ' + JSON.stringify(response, undefined, 4));
  };
  
  page.open(url, function(status) {
    if (status !== "success") {
      return console.log("Unable to open " + url);
    } else {

      page.evaluate(function() {
        var pattern = /((?:(?:USD|EUR|\$|€){1}(?:\ ?)(?:[0-9]+[\.|\,]?[0-9]*){1}(?:\ ?)){1}|(?:(?:[0-9]+[\.|\,]?[0-9]*){1}(?:\ ?)(?:USD|EUR|\$|€){1}){1})/;
        var attributes, el, elements, i, output, propertyName, rule, ruleList, rules, style, _i, _j, _k, _len, _ref1, _ref2;
        output = {
          url: location,
          retrieved_at: new Date,
          elements: [],
          pagetitle: '',
          imgs: []
        };
        
        var mergeNodes = function(a, b) {
            return [].slice.call(a).concat([].slice.call(b));
        };
        
        var strip = function(html) {
           var tmp = document.createElement("DIV");
           tmp.innerHTML = html;
           return tmp.textContent || tmp.innerText || "";
        };

        output.pagetitle = document.getElementsByTagName('title')[0].innerHTML.trim();

        var elements = mergeNodes(
                        mergeNodes(
                          mergeNodes(document.getElementsByTagName('div'), document.getElementsByTagName('span')), 
                          mergeNodes(document.getElementsByTagName('p'), document.getElementsByTagName('a'))
                        ), 
                        mergeNodes(document.getElementsByTagName('b'), document.getElementsByTagName('strong'))
                      );


        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          
          //console.log(el.nodeName + '.' + el.className);
          var debug = false;
          //if(el.className == 'price priceXL') debug = true; 

          if(strip(el.innerHTML).length < 200) {
            var matches = strip(el.innerHTML).match(pattern);

            if(matches != null) {
              //console.log(' >> MATCH');
              style = window.getComputedStyle(el);
              attributes = {};
              for (i = _j = 0, _ref1 = style.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                propertyName = style.item(i);

                if(propertyName == 'font-size' || propertyName == 'font-weight' || propertyName == 'visibility' || propertyName == 'color' || propertyName == 'display') {
                  attributes[propertyName] = style.getPropertyValue(propertyName);
                }
              }

              attributes['font-weight'] = attributes['font-weight'].replace('normal', '400').replace('bold', '700');
              attributes['font-size'] = parseInt(attributes['font-size'].replace('px', ''));

              var price = parseFloat(matches[0].replace(',', '.').replace('EUR', '').replace('€', '').replace('$', '').replace('USD', ''));
              if(debug) console.log('### debug - price: ' + price);
              if(price > 0) {
                if(el.offsetWidth > 0 && el.offsetHeight > 0) {
                  if(debug) console.log('### debug - font-size: ' + attributes['font-size']);

                  ruleList = el.ownerDocument.defaultView.getMatchedCSSRules(el, '') || [];
                  rules = [];
                  for (i = _k = 0, _ref2 = ruleList.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
                    rule = ruleList[i];
                    rules.push({
                      selectorText: rule.selectorText,
                      parentStyleSheet: rule.parentStyleSheet.href
                    });
                  }
                  output.elements.push({
                    id: el.id,
                    className: el.className,
                    nodeName: el.nodeName,
                    offsetHeight: el.offsetHeight,
                    offsetWidth: el.offsetWidth,
                    computedStyle: attributes,
                    price: matches[0]
                  });
                }
              }
            }
          }
        }

        ///////////////////////////////////////////////////////////////
        /////////////////////// IMAGE DETECTION ///////////////////////
        ///////////////////////////////////////////////////////////////
        var images = document.getElementsByTagName('img');

        for (_i = 0, _len = images.length; _i < _len; _i++) {
          el = images[_i];
          var surface = el.offsetHeight * el.offsetWidth;
          var ratio   = el.offsetHeight / el.offsetWidth;
          console.log(el.src + ' - h:' + el.offsetHeight + ' - w: ' + el.offsetWidth + ' - id: ' + el.id);
          if(surface > 7000 && ratio < 4 && ratio > 0.25) {
            console.log(' --> enter');
            style = window.getComputedStyle(el);
            attributes = {};
            for (i = _j = 0, _ref1 = style.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              propertyName = style.item(i);

              if(propertyName == 'height' || propertyName == 'width' || propertyName == 'offsetWidth' || propertyName == 'offsetHeight') {
                attributes[propertyName] = style.getPropertyValue(propertyName);
              }
            }
            ruleList = el.ownerDocument.defaultView.getMatchedCSSRules(el, '') || [];
            rules = [];
            for (i = _k = 0, _ref2 = ruleList.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
              rule = ruleList[i];
              rules.push({
                selectorText: rule.selectorText,
                parentStyleSheet: rule.parentStyleSheet.href
              });
            }

            output.imgs.push({
              id: el.id,
              className: el.className,
              nodeName: el.nodeName,
              src: el.src,
              surface: surface,
              offsetHeight: el.offsetHeight,
              offsetWidth: el.offsetWidth,
              computedStyle: attributes,
            });
          }
        }

        output.elements.sort(function (a, b) {
          if(a.computedStyle['font-size'] > b.computedStyle['font-size']) {
            return -1;
          } else if(a.computedStyle['font-size'] < b.computedStyle['font-size']) {
            return 1;
          } else {
            if(a.computedStyle['font-weight'] > b.computedStyle['font-weight']) {
              return -1;
            } else {
              return 1;
            }
          }
        });

        output.imgs.sort(function (a, b) {
          if(a.surface > b.surface) {
            return -1
          } else {
            return 1;
          }
        });

        //console.log(JSON.stringify(output.elements, null, 4));
        //return console.log(JSON.stringify(output, null, 5));
        var imgs_array = ''; 
        for(i=0; i < output.imgs.length; i++) {
          imgs_array+='{"src": "' + output.imgs[i].src + '", "height":"' + output.imgs[i].offsetHeight + '", "width":"' + output.imgs[i].offsetWidth + '"}, ';
        }

        var result = {
          price: output.elements[0].price.replace('€', 'EUR'),
          images: output.imgs,
          title: output.pagetitle
        }

        return console.log('@@@' + JSON.stringify(result) + '@@@');

        //return console.log('@@@{"price":"' + output.elements[0].price.replace('€', 'EUR') + '", "images": [' + imgs_array.substr(0, imgs_array.length-2) + '], "title":"' + output.pagetitle + '"}@@@');
      });

      return window.setTimeout((function() {
        return phantom.exit();
      }), 200);
    }
  });
}).call(this);
